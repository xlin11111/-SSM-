Spring知识点总结

 

1. 简介一下Spring框架。

答：Spring框架是一个开源的容器性质的轻量级框架。主要有三大特点：容器、IOC（控制反转）、AOP（面向切面编程）。

 

2. Spring框架有哪些优点？谈谈你的看法。

答：Spring框架主要有三大优点：

(1) 容器。Spring框架是一个容器，能够管理项目中的所有对象。

(2) IOC（控制反转）。Spring将创建对象的方式反转了，从程序员自己创建反转给了程序。

(3) AOP（面向切面）。面向切面编程，简而言之，就是将纵向重复的代码横向抽取出来。Spring框架应用了面向切面的思想，主要体现在为容器中管理的对象生成动态代理对象。

 

3. 什么是IOC？

答：IOC：控制反转，指得是将对象的创建权反转给Spring。作用是实现了程序的解耦合。、

 

4. 什么是DI？

答：DI：依赖注入，需要有IOC环境，在Spring创建Bean对象时，动态的将依赖对象注入到Bean对象中去。依赖注入最大的好处就是解耦合。

 

5. 你对Spring框架中的BeanFactory接口和ApplicationContext接口有什么理解？二者有什么区别？

答：BeanFactory接口是Spring框架的顶层接口，是最原始的接口，通过new （BeanFactory的实现类）来启动Spring容器时，并不会创建Spring容器里面的对象，只有在每次通过getBean()获得对象时才会创建。

ApplicationContext接口是用来替代BeanFactory接口的，通过new （ApplicationContext接口的实现类）ClassPathXmlApplicationContext来启动Spring容器时，就会创建容器中配置的所有对象。

 

6. Spring中的工厂容器有哪两个，它们的区别是什么？

答：BeanFactory和ApplicationContext。

BeanFactory接口是Spring框架的顶层接口，是最原始的接口，ApplicationContext是对BeanFactory扩展，BeanFactory在第一次getBean时才会初始化Bean, ApplicationContext是会在加载配置文件时初始化Bean。

BeanFactory beanFactory = new XmlBeanFactory(new ClassPathResource("applicationContext.xml"));

IHelloService helloService = (IHelloService) beanFactory.getBean("helloService");

helloService.sayHello();

 

我们刚开始学习用spring创建Bean对象的时候，最先学的是通过配置<Bean>标签的形式，这一块有很多的知识点需要我们掌握。

 

7. 谈谈你对Spring容器中Bean标签的理解。

答：Bean标签用来描述Spring容器管理的对象。

假如有一个User对象，需要交给Spring容器来管理，这样就需要在Spring容器的主配置文件中通过Bean标签来描述该对象。Bean标签常见的属性有以下几个：

name属性：给被管理的对象起个名称，获得对象时要根据该名称来获得。

class属性：被管理对象的完整类名。

scope属性：scope属性常见的有两个属性值，singleton和prototype，这两个属性值用 来指定创建对象时是单例还是多例，默认为singleton(单例)，但在整合整合struts2 时,ActionBean必须配置为多例的.

 

8. Spring通过配置<bean>标签来生成Bean对象有哪三种方式？

答：空参构造方式、静态工厂方式和实例工厂方式。一般都只会用空参构造方式。如下：

<bean id="bean1" class="cn.itcast.spring.b_instance.Bean1"></bean>

 

9. Spring框架中属性注入有哪几种方式：

答：Spring中的输入注入方式包括set方法注入、构造函数注入、p名称空间注入、spel注入，除此之外，还包括复杂方式注入，如数组、List、Map、Properties等属性的注入。



10. 简述一下bean的生命周期？

答：bean的生命周期包括bean的定义、bean的初始化、bean的调用和bean的销毁。

在配置文件里面通过<bean></bean>来完成bean的定义，通过配置init-method属性来完成bean的初始化，通过得到bean的实例对象来完成bean的调用，通过配置destory-method属性来完成bean的销毁。

 

11. 简述一下bean的作用域？

答：bean有5种作用域，分别是singleton（单例，默认）、prototype（默认）、request、session、globalSession。

singleton

当一个bean的作用域为singleton, 那么Spring IoC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。

prototype

Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean() 方法）时都会创建一个新的bean实例。根据经验，对所有有状态的bean应该使用prototype作用域，而对无状态的bean则应该使用 singleton作用域

request

在一次HTTP请求中，一个bean定义对应一个实例；即每次HTTP请求将会有各自的bean实例， 它们依据某个bean定义创建而成。该作用 域仅在基于web的Spring ApplicationContext情形下有效。

session

在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。

global session

在一个全局的HTTP Session中，一个bean定义对应一个实例。典型情况下，仅在使用portlet context的时候有效。该作用域仅在基于 web的Spring ApplicationContext情形下有效。


以上讲了Spring容器的常见配置，比如向Spring容器中注册一个对象，需要在Spring的主配置文件中用Bean标签来描述该对象，在实际开发中，一个项目中会有特别多的对象，如果都用Bean标签来配置，未免太过麻烦了。基于此，Spring容器为我们提供了注解的概念，用注解来代替配置。

 

如何使用Spring中的注解？

 

在使用注解之前，要先在spring的主配置文件中通过Context:component-scan标签来开启使用注解的开关。

 

12. 用注解将对象注册到Spring容器当中，有几种注解方式？它们有什么区别吗？

答：4种。分别是：@Component()、@Service()、@Controller()、@Respository()。

Spring框架最早出现的只有@Component()注解，但如果所有的对象都使用同一个注解，很难区分对象究竟属于哪一层架构。基于此，Spring又推出了@Service()、@Controller()、@Respository()三种注解，用于区分对象属于哪一层架构。但4种注解方式从功能上来说没有任何区别。

 

13. Spring框架中，什么注解可以用来指定对象的作用范围？

答：@Scope(scopeName=”singleton”)。

 

14. 如何用注解的方式来完成属性注入？

答：按类型分可以分为值类型注入和引用类型注入。

值类型注入可以通过@Value()注解来完成，该注解既可以声明在属性上，也可以声明在方法上，建议声明在方法上，但是更多的人会声明在属性上，因为更方便。

引用类型注入可以通过三种注解方式来完成，分别为：@Autowired、@Autowired和@Qualifier()二者结合、@Resource()。建议使用@Resource()，但是一般我都会用@Autowired。

 

Spring中的AOP

 

1. 谈谈你对AOP的理解。

答：AOP，面向切面编程。简单来讲就是将纵向重复的代码，横向抽取出来。

很明显的一个体现就是在Filter过滤器中。在没有Filter之前，解决servlet的乱码问题是很复杂的，每次在接收请求之前，都要写句代码来解决乱码问题,即：request.setCharacterEncoding(“UTF-8”)，只要写一个servlet，就是写这句代码来解决乱码问题。直到有一天，Filter出现了。我们把解决乱码的那句代码放到Filter中去，从此在servlet中，就再也不用重复写那句代码了。从架构上来说，Filter解决乱码的事架在了所有的servlet上，这样一来，切面就形成了。

面向切面编程的思想，还有一个直接的体现就是在拦截器中。（后面待补充）

 

2. Spring中的AOP思想靠什么来体现的呢？

答：Spring中的AOP思想体现在能够为容器中管理的对象生成动态代理对象。

 

3. aop名词学习

Joinpoint（连接点）：目标对象中，所有可以增强的方法

Pointcut（切入点）：目标对象，已经增强的方法。

Advice（通知/增强）：增强的代码

Target（目标对象）：被代理对象

Weaving（织入）：将通知应用到切入点的过程

Proxy（代理）：将通知织入目标对象之后，形成代理对象
